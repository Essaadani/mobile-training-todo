//
// TaskListCellModel.cs
//
// Author:
// 	Jim Borden  <jim.borden@couchbase.com>
//
// Copyright (c) 2016 Couchbase, Inc All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Input;

using Acr.UserDialogs;
using Couchbase.Lite;
using CouchbaseLabs.MVVM.Input;
using CouchbaseLabs.MVVM.Services;
using Training.Core;
using Training.Models;

namespace Training.ViewModels
{
   
    /// <summary>
    /// The view model for an entry in the TaskListsPage table view
    /// </summary>
    public sealed class TaskListCellModel : BaseNavigationViewModel
    {

        #region Variables

        private readonly IUserDialogs _dialogs;

        private Document _document;

        public delegate void StatusUpdatedEventHandler();
        public event StatusUpdatedEventHandler StatusUpdated;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the document ID of the document being tracked
        /// </summary>
        public string DocumentID { get; set; }

        /// <summary>
        /// Gets the handler for an edit request
        /// </summary>
        public ICommand EditCommand => new Command(async() => await Edit());

        /// <summary>
        /// Gets the handler for a delete request
        /// </summary>
        public ICommand DeleteCommand => new Command(() => Delete());

        /// <summary>
        /// Gets or sets the incomplete count for this row
        /// </summary>
        public int IncompleteCount 
        {
            get => _incompleteCount;
            set => SetPropertyChanged(ref _incompleteCount, value);
        }
        private int _incompleteCount;

        /// <summary>
        /// Gets the name of the list
        /// </summary>
        public string Name
        {
            get => _name;
            set => SetPropertyChanged(ref _name, value);
        }
        private string _name;

        /// <summary>
        /// Gets the name of the list
        /// </summary>
        //public string Name => _document?.GetString("name");

        #endregion

        #region Constructors

        public TaskListCellModel(INavigationService navigationService, IUserDialogs dialogs, string documentId, string name) 
            : base(navigationService, dialogs)
        {
            DocumentID = documentId;
            Name = name;
            _incompleteCount = -1;
            _document = CoreApp.Database.GetDocument(documentId);
            _dialogs = dialogs;
        }

      

        ///// <summary>
        ///// Constructor
        ///// </summary>
        ///// <param name="documentId">The ID of the document to track.</param>
        ///// <param name="name">The name generated by the view</param>
        //public TaskListCellModel(INavigationService navigationService, string documentId, string name)
        //    : base(navigationService)
        //{
        //    DocumentID = documentId;
        //    _incompleteCount = -1;
        //    Name = name;
        //}

        #region Public API

        /// <summary>
        /// Deletes the list entry
        /// </summary>
        public bool DeleteItem()
        {
            if (_document == null)
            {
                return true;
            }

            var db = CoreApp.Database;
            if (_document.GetString("owner") != db.Name && !HasModerator(db))
            {
                return false;
            }

            try
            {
                db.Delete(_document);
                _document = null;
            }
            catch (Exception e)
            {
                throw new Exception("Couldn't delete task list", e);
            }

            return true;
        }

        /// <summary>
        /// Edits the list entry's name
        /// </summary>
        /// <param name="name">The new name to use.</param>
        public void Edit(string name)
        {
            try
            {
                using (var mutableDoc = _document.ToMutable())
                {
                    mutableDoc.SetString("name", name);
                    var document = _document;
                    CoreApp.Database.Save(mutableDoc);
                    _document = mutableDoc;
                    document.Dispose();
                }
            }
            catch (Exception e)
            {
                throw new Exception("Couldn't edit task list", e);
            }
        }



        #endregion

        #region Private API

        private bool HasModerator(Database db)
        {
            var moderatorDocId = $"moderator.{db.Name}";
            var doc = db.GetDocument(moderatorDocId);
            doc?.Dispose();
            return doc != null;
        }

        #endregion

        private void Delete()
        {
            try {
                if (!DeleteItem()) {
                    _dialogs.Toast("Error: Missing delete access");
                }
                StatusUpdated?.Invoke();
            } catch(Exception e) {
                _dialogs.Toast(e.Message);
            }
        }

        private async Task Edit()
        {
            var result = await _dialogs.PromptAsync(new PromptConfig {
                Title = "Edit Task List",
                Text = Name,
                Placeholder = "List Name"
            });

            if(result.Ok) {
                try {
                    Edit(result.Text);
                } catch (Exception e) {
                    _dialogs.Toast(e.Message);
                }
                StatusUpdated?.Invoke();
            }
        }

        #endregion

        #region Overrides

        public override bool Equals(object obj)
        {
            var other = obj as TaskListCellModel;
            if(other == null) {
                return false;
            }

            return DocumentID.Equals(other.DocumentID) && Name.Equals(other.Name) && IncompleteCount == other.IncompleteCount;
        }

        public override int GetHashCode()
        {
            return DocumentID.GetHashCode() ^ (Name ?? "").GetHashCode() ^ IncompleteCount.GetHashCode();
        }

        #endregion

    }
}

